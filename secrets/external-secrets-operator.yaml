---
# Create a namespace for External Secrets Operator
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets
---
# Create a ServiceAccount for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::654654214394:role/eks-nebulance-external-secrets-role  # Replace with the IAM role ARN created in Task 1
---
# Create a ClusterSecretStore to connect to AWS Secrets Manager
apiVersion: external-secrets.io/v1
kind: ClusterSecretStore
metadata:
  name: aws-secretsmanager
spec:
  provider:
    aws:
      service: SecretsManager
      region: eu-central-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets
            namespace: external-secrets
---
# Create an ExternalSecret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: default
spec:
  refreshInterval: "15m"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
  data:
  - secretKey: POSTGRES_USER
    remoteRef:
      key: eks-app/database
      property: POSTGRES_USER
  - secretKey: POSTGRES_PASSWORD
    remoteRef:
      key: eks-app/database
      property: POSTGRES_PASSWORD
  - secretKey: POSTGRES_DB
    remoteRef:
      key: eks-app/database
      property: POSTGRES_DB
---
# Create an ExternalSecret for application secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-secrets
  namespace: default
spec:
  refreshInterval: "15m"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: application-secrets
    creationPolicy: Owner
  data:
  - secretKey: JWT_SECRET
    remoteRef:
      key: eks-app/application
      property: JWT_SECRET
  - secretKey: API_KEY
    remoteRef:
      key: eks-app/application
      property: API_KEY